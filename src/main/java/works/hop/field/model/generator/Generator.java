package works.hop.field.model.generator;

import com.squareup.javapoet.*;
import works.hop.field.model.Lexer;
import works.hop.field.model.Node;
import works.hop.field.model.Parser;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class Generator {

    Node node;
    String destDir = "build/generated/sources/";
    Map<String, TypeName> typeMap = new HashMap<>() {
        {
            put("null", null);
            put("boolean", TypeName.BOOLEAN);
            put("int", TypeName.INT);
            put("long", TypeName.LONG);
            put("float", TypeName.FLOAT);
            put("double", TypeName.DOUBLE);
            put("bytes", TypeName.BYTE);
            put("string", TypeName.get(String.class));
        }
    };

    public Generator(Node node) {
        this.node = node;
    }

    public static void main(String[] args) {
        Lexer gen = new Lexer("/model/ex2.avsc");
        gen.parse();

        Parser parser = new Parser(gen.getTokens());
        parser.parse();

        Generator generator = new Generator(parser.getNodesBuilt().get(0));
        generator.generate();
    }

    public void generate() {
        TypeSpec.Builder builder = TypeSpec.classBuilder(node.name)
                .addModifiers(Modifier.PUBLIC);

        //create constructor
        MethodSpec defaultConstructor = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .build();
        builder.addMethod(defaultConstructor);

        for (Node child : node.children) {
            //add instance field
            FieldSpec fieldSpec = FieldSpec.builder(
                    typeMap.get(child.type),
                    child.name,
                    Modifier.PROTECTED)
                    .build();
            builder.addField(fieldSpec);

            //add setter
            MethodSpec setter = MethodSpec.methodBuilder("set" + capitalize(child.name))
                    .returns(TypeName.VOID)
                    .addModifiers(Modifier.PUBLIC)
                    .addParameter(typeMap.get(child.type), child.name)
                    .addStatement(String.format("this.%s = %s", child.name, child.name))
                    .build();
            builder.addMethod(setter);

            //add getter
            MethodSpec getter = MethodSpec.methodBuilder("set" + capitalize(child.name))
                    .addModifiers(Modifier.PUBLIC)
                    .returns(typeMap.get(child.type))
                    .addStatement(String.format("return this.%s", child.name))
                    .build();
            builder.addMethod(getter);
        }

        //add package name
        JavaFile javaFile = JavaFile.builder(node.packageName, builder.build())
                .addFileComment("AUTO-GENERATED by JavaPoet")
                .build();

        //write to file system
        try {
            javaFile.writeTo(Paths.get(destDir));
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }
    }

    public String capitalize(String input){
        return String.format("%s%s", Character.toUpperCase(input.charAt(0)),
                input.substring(1));
    }
}
